{"version":3,"file":"avl-promise.es6.js","sources":["../src/utils.js","../src/index.js"],"sourcesContent":["\n/**\n * Prints tree horizontally\n * @param  {Node}                       root\n * @param  {Function(node:Node):String} [printNode]\n * @return {String}\n */\nexport function print (root, printNode = (n) => n.key) {\n  var out = [];\n  row(root, '', true, (v) => out.push(v), printNode);\n  return out.join('');\n}\n\n/**\n * Prints level of the tree\n * @param  {Node}                        root\n * @param  {String}                      prefix\n * @param  {Boolean}                     isTail\n * @param  {Function(in:string):void}    out\n * @param  {Function(node:Node):String}  printNode\n */\nfunction row (root, prefix, isTail, out, printNode) {\n  if (root) {\n    out(`${ prefix }${ isTail ? '└── ' : '├── ' }${ printNode(root) }\\n`);\n    const indent = prefix + (isTail ? '    ' : '│   ');\n    if (root.left)  row(root.left,  indent, false, out, printNode);\n    if (root.right) row(root.right, indent, true,  out, printNode);\n  }\n}\n\n\n/**\n * Is the tree balanced (none of the subtrees differ in height by more than 1)\n * @param  {Node}    root\n * @return {Boolean}\n */\nexport function isBalanced(root) {\n  if (root === null) return true; // If node is empty then return true\n\n  // Get the height of left and right sub trees\n  var lh = height(root.left);\n  var rh = height(root.right);\n\n  if (Math.abs(lh - rh) <= 1 &&\n      isBalanced(root.left)  &&\n      isBalanced(root.right)) return true;\n\n  // If we reach here then tree is not height-balanced\n  return false;\n}\n\n/**\n * The function Compute the 'height' of a tree.\n * Height is the number of nodes along the longest path\n * from the root node down to the farthest leaf node.\n *\n * @param  {Node} node\n * @return {Number}\n */\nfunction height(node) {\n  return node ? (1 + Math.max(height(node.left), height(node.right))) : 0;\n}\n","import Promise from 'bluebird';\nimport { print, isBalanced } from './utils';\n\n// TODO update doc comments\n// TODO remove dead code\n\n// function createNode (parent, left, right, height, key, data) {\n//   return { parent, left, right, balanceFactor: height, key, data };\n// }\n\n/**\n * @typedef {{\n *   parent:        ?Node,\n *   left:          ?Node,\n *   right:         ?Node,\n *   balanceFactor: number,\n *   key:           Key,\n *   data:          Value\n * }} Node\n */\n\n/**\n * @typedef {*} Key\n */\n\n/**\n * @typedef {*} Value\n */\n\n/**\n * Default comparison function\n * @param {Key} a\n * @param {Key} b\n * @returns {number}\n */\n\nfunction DEFAULT_COMPARE_ASYNC (a, b) {\n  return a > b ?\n    Promise.resolve(1) :\n    a < b ?\n      Promise.resolve(-1) :\n      Promise.resolve(0);\n}\n\n/**\n * Single left rotation\n * @param  {Node} node\n * @return {Node}\n */\nfunction rotateLeft (node) {\n  var rightNode = node.right;\n  node.right    = rightNode.left;\n\n  if (rightNode.left) rightNode.left.parent = node;\n\n  rightNode.parent = node.parent;\n  if (rightNode.parent) {\n    if (rightNode.parent.left === node) {\n      rightNode.parent.left = rightNode;\n    } else {\n      rightNode.parent.right = rightNode;\n    }\n  }\n\n  node.parent    = rightNode;\n  rightNode.left = node;\n\n  node.balanceFactor += 1;\n  if (rightNode.balanceFactor < 0) {\n    node.balanceFactor -= rightNode.balanceFactor;\n  }\n\n  rightNode.balanceFactor += 1;\n  if (node.balanceFactor > 0) {\n    rightNode.balanceFactor += node.balanceFactor;\n  }\n  return rightNode;\n}\n\n\nfunction rotateRight (node) {\n  var leftNode = node.left;\n  node.left = leftNode.right;\n  if (node.left) node.left.parent = node;\n\n  leftNode.parent = node.parent;\n  if (leftNode.parent) {\n    if (leftNode.parent.left === node) {\n      leftNode.parent.left = leftNode;\n    } else {\n      leftNode.parent.right = leftNode;\n    }\n  }\n\n  node.parent    = leftNode;\n  leftNode.right = node;\n\n  node.balanceFactor -= 1;\n  if (leftNode.balanceFactor > 0) {\n    node.balanceFactor -= leftNode.balanceFactor;\n  }\n\n  leftNode.balanceFactor -= 1;\n  if (node.balanceFactor < 0) {\n    leftNode.balanceFactor += node.balanceFactor;\n  }\n\n  return leftNode;\n}\n\n\n// function leftBalance (node) {\n//   if (node.left.balanceFactor === -1) rotateLeft(node.left);\n//   return rotateRight(node);\n// }\n\n\n// function rightBalance (node) {\n//   if (node.right.balanceFactor === 1) rotateRight(node.right);\n//   return rotateLeft(node);\n// }\n\n\nexport default class AVLTree {\n  /**\n   * Callback for comparator\n   * @callback comparatorCallback\n   * @param {Key} a\n   * @param {Key} b\n   * @returns {number}\n   */\n\n  /**\n   * @class AVLTree\n   * @constructor\n   * @param  {comparatorCallback} [comparator]\n   * @param  {boolean}            [noDuplicates=false] Disallow duplicates\n   */\n  constructor (comparator, noDuplicates = false) {\n    this._comparatorAsync = comparator || DEFAULT_COMPARE_ASYNC;\n    this._root = null;\n    this._size = 0;\n    this._noDuplicates = !!noDuplicates;\n  }\n\n\n  /**\n   * Clear the tree\n   * @return {AVLTree}\n   */\n  destroy() {\n    this._root = null;\n    return this;\n  }\n\n  /**\n   * Number of nodes\n   * @return {number}\n   */\n  get size () {\n    return this._size;\n  }\n\n\n  /**\n   * Whether the tree contains a node with the given key\n   * @param  {Key} key\n   * @return {boolean} true/false\n   */\n\n  contains (key) {\n    return this._containsAsync(key, this._root);\n  }\n\n  _containsAsync (key, node) {\n    if (!node) { return Promise.resolve(false); }\n    return this._comparatorAsync(key, node.key)\n      .then(cmp => {\n        if (cmp === 0) return Promise.resolve(true);\n        if (cmp  <  0) return this._containsAsync(key, node.left);\n        return this._containsAsync(key, node.right);\n      });\n  }\n\n\n  /* eslint-disable class-methods-use-this */\n\n  /**\n   * Successor node\n   * @param  {Node} node\n   * @return {?Node}\n   */\n  next (node) {\n    var successor = node;\n    if (successor) {\n      if (successor.right) {\n        successor = successor.right;\n        while (successor && successor.left) successor = successor.left;\n      } else {\n        successor = node.parent;\n        while (successor && successor.right === node) {\n          node = successor; successor = successor.parent;\n        }\n      }\n    }\n    return successor;\n  }\n\n\n  /**\n   * Predecessor node\n   * @param  {Node} node\n   * @return {?Node}\n   */\n  prev (node) {\n    var predecessor = node;\n    if (predecessor) {\n      if (predecessor.left) {\n        predecessor = predecessor.left;\n        while (predecessor && predecessor.right) predecessor = predecessor.right;\n      } else {\n        predecessor = node.parent;\n        while (predecessor && predecessor.left === node) {\n          node = predecessor;\n          predecessor = predecessor.parent;\n        }\n      }\n    }\n    return predecessor;\n  }\n  /* eslint-enable class-methods-use-this */\n\n\n  /**\n   * Callback for forEach\n   * @callback forEachCallback\n   * @param {Node} node\n   * @param {number} index\n   */\n\n  /**\n   * @param  {forEachCallback} callback\n   * @return {AVLTree}\n   */\n  forEach(callback) {\n    var current = this._root;\n    var s = [], done = false, i = 0;\n\n    while (!done) {\n      // Reach the left most Node of the current Node\n      if (current) {\n        // Place pointer to a tree node on the stack\n        // before traversing the node's left subtree\n        s.push(current);\n        current = current.left;\n      } else {\n        // BackTrack from the empty subtree and visit the Node\n        // at the top of the stack; however, if the stack is\n        // empty you are done\n        if (s.length > 0) {\n          current = s.pop();\n          callback(current, i++);\n\n          // We have visited the node and its left\n          // subtree. Now, it's right subtree's turn\n          current = current.right;\n        } else done = true;\n      }\n    }\n    return this;\n  }\n\n\n  /**\n   * Walk key range from `low` to `high`. Stops if `fn` returns a value.\n   * @param  {Key}      low\n   * @param  {Key}      high\n   * @param  {Function} fn\n   * @param  {*?}       ctx\n   * @return {SplayTree}\n   */\n  range(low, high, fn, ctx) {\n    const Q = [];\n    let node = this._root;\n\n    return this._range(Q, node, high, low, fn, ctx);\n  }\n\n  _range (Q, node, high, low, fn, ctx) {\n    if (Q.length === 0 && !node) return Promise.resolve(this);\n\n    if (node) {\n      Q.push(node);\n      node = node.left;\n      return this._range(Q, node, high, low, fn, ctx);\n    }\n    node = Q.pop();\n    return this._comparatorAsync(node.key, high)\n      .then(cmp => {\n        if (cmp > 0) return Promise.resolve(this);\n\n        return this._comparatorAsync(node.key, low)\n          .then(cmp => {\n            if (cmp >= 0) return Promise.resolve(fn.call(ctx, node));\n            return Promise.resolve();\n          })\n          .then(res => {\n            if (res) return Promise.resolve(this);\n\n            node = node.right;\n            return this._range(Q, node, high, low, fn, ctx);\n          });\n      });\n  }\n\n\n  /**\n   * Returns all keys in order\n   * @return {Array<Key>}\n   */\n  keys () {\n    var current = this._root;\n    var s = [], r = [], done = false;\n\n    while (!done) {\n      if (current) {\n        s.push(current);\n        current = current.left;\n      } else {\n        if (s.length > 0) {\n          current = s.pop();\n          r.push(current.key);\n          current = current.right;\n        } else done = true;\n      }\n    }\n    return r;\n  }\n\n\n  /**\n   * Returns `data` fields of all nodes in order.\n   * @return {Array<Value>}\n   */\n  values () {\n    var current = this._root;\n    var s = [], r = [], done = false;\n\n    while (!done) {\n      if (current) {\n        s.push(current);\n        current = current.left;\n      } else {\n        if (s.length > 0) {\n          current = s.pop();\n          r.push(current.data);\n          current = current.right;\n        } else done = true;\n      }\n    }\n    return r;\n  }\n\n\n  /**\n   * Returns node at given index\n   * @param  {number} index\n   * @return {?Node}\n   */\n  at (index) {\n    // removed after a consideration, more misleading than useful\n    // index = index % this.size;\n    // if (index < 0) index = this.size - index;\n\n    var current = this._root;\n    var s = [], done = false, i = 0;\n\n    while (!done) {\n      if (current) {\n        s.push(current);\n        current = current.left;\n      } else {\n        if (s.length > 0) {\n          current = s.pop();\n          if (i === index) return current;\n          i++;\n          current = current.right;\n        } else done = true;\n      }\n    }\n    return null;\n  }\n\n\n  /**\n   * Returns node with the minimum key\n   * @return {?Node}\n   */\n  minNode () {\n    var node = this._root;\n    if (!node) return null;\n    while (node.left) node = node.left;\n    return node;\n  }\n\n\n  /**\n   * Returns node with the max key\n   * @return {?Node}\n   */\n  maxNode () {\n    var node = this._root;\n    if (!node) return null;\n    while (node.right) node = node.right;\n    return node;\n  }\n\n\n  /**\n   * Min key\n   * @return {?Key}\n   */\n  min () {\n    var node = this._root;\n    if (!node) return null;\n    while (node.left) node = node.left;\n    return node.key;\n  }\n\n\n  /**\n   * Max key\n   * @return {?Key}\n   */\n  max () {\n    var node = this._root;\n    if (!node) return null;\n    while (node.right) node = node.right;\n    return node.key;\n  }\n\n\n  /**\n   * @return {boolean} true/false\n   */\n  isEmpty() {\n    return !this._root;\n  }\n\n\n  /**\n   * Removes and returns the node with smallest key\n   * @return {?Node}\n   */\n  pop () {\n    var node = this._root;\n    if (node) {\n      while (node.left) node = node.left;\n      const res = { key: node.key, data: node.data };\n      return this.remove(node.key)\n        .then(() => res);\n    }\n    return Promise.resolve(null);\n  }\n\n\n  /**\n   * Find node by key\n   * @param  {Key} key\n   * @return {?Node}\n   */\n\n  find (key) {\n    return this._findAsync(key, this._root);\n  }\n\n  _findAsync (key, node) {\n    if (!node) return Promise.resolve(null);\n    return this._comparatorAsync(key, node.key)\n      .then(cmp => {\n        if (cmp < 0) return this._findAsync(key, node.left);\n        if (cmp > 0) return this._findAsync(key, node.right);\n        return Promise.resolve(node);\n      });\n  }\n\n\n  /**\n   * Insert a node into the tree\n   * @param  {Key} key\n   * @param  {Value} [data]\n   * @return {?Node}\n   */\n\n  insert (key, data) {\n    if (!this._root) {\n      this._root = {\n        parent: null, left: null, right: null, balanceFactor: 0,\n        key, data\n      };\n      this._size++;\n      return Promise.resolve(this._root);\n    }\n    return Promise.resolve(this._insertAsync(key, data, this._root, this._noDuplicates));\n  }\n\n  _findParent (key, node) {\n    return this._comparatorAsync(key, node.key)\n      .then(cmp => {\n        if (cmp === 0 && this._noDuplicates) {\n          return Promise.resolve([node, cmp]);\n        }\n        if (cmp <= 0) {\n          return node.left ?\n            this._findParent(key, node.left, this._noDuplicates) :\n            Promise.resolve([node, cmp]);\n        }\n        return node.right ?\n          this._findParent(key, node.right, this._noDuplicates) :\n          Promise.resolve([node, cmp]);\n      });\n  }\n\n  _rebalanceInsert (parent, key) {\n    let newRoot;\n\n    if (!parent) {\n      this._size++;\n      return Promise.resolve();\n    }\n\n    return this._comparatorAsync(parent.key, key)\n      .then(cmp => {\n        if (cmp < 0) parent.balanceFactor -= 1;\n        else parent.balanceFactor += 1;\n\n        if (parent.balanceFactor === 0) {\n          this._size++;\n          return Promise.resolve();\n        } else if (parent.balanceFactor < -1) {\n          if (parent.right.balanceFactor === 1) rotateRight(parent.right);\n          newRoot = rotateLeft(parent);\n\n          if (parent === this._root) this._root = newRoot;\n          this._size++;\n          return Promise.resolve();\n        } else if (parent.balanceFactor > 1) {\n          if (parent.left.balanceFactor === -1) rotateLeft(parent.left);\n          newRoot = rotateRight(parent);\n\n          if (parent === this._root) this._root = newRoot;\n          this._size++;\n          return Promise.resolve();\n        }\n        return this._rebalanceInsert(parent.parent, key);\n      });\n  }\n\n  _insertAsync (key, data, node) {\n    let newNode;\n    return this._findParent(key, node)\n      .then(([parent, cmp]) => {\n        if (cmp === 0 && this._noDuplicates) return null;\n        newNode = {\n          left: null,\n          right: null,\n          balanceFactor: 0,\n          parent, key, data\n        };\n\n        if (cmp <= 0) parent.left  = newNode;\n        else parent.right = newNode;\n\n        return this._rebalanceInsert(parent, key);\n      })\n      .then(() => newNode);\n  }\n\n  _rebalanceRemove (parent, pp) {\n    let newRoot;\n\n    if (!parent) return Promise.resolve();\n\n    if (parent.left === pp) parent.balanceFactor -= 1;\n    else                    parent.balanceFactor += 1;\n\n    if (parent.balanceFactor < -1) {\n      if (parent.right.balanceFactor === 1) rotateRight(parent.right);\n      newRoot = rotateLeft(parent);\n\n      if (parent === this._root) this._root = newRoot;\n      parent = newRoot;\n\n      return Promise.resolve();\n    } else if (parent.balanceFactor > 1) {\n      if (parent.left.balanceFactor === -1) rotateLeft(parent.left);\n      newRoot = rotateRight(parent);\n\n      if (parent === this._root) this._root = newRoot;\n      return Promise.resolve();\n    }\n\n    if (parent.balanceFactor === -1 || parent.balanceFactor === 1) {\n      return Promise.resolve();\n    }\n\n    return this._rebalanceRemove(parent.parent, parent);\n  }\n\n  /**\n   * Removes the node from the tree. If not found, returns null.\n   * @param  {Key} key\n   * @return {?Node}\n   */\n  remove (key) {\n    if (!this._root) return null;\n\n    return this.find(key)\n      .then(node => {\n        if (!node) return Promise.resolve();\n\n        var returnValue = node.key;\n        var max, min;\n\n        if (node.left) {\n          max = node.left;\n\n          while (max.left || max.right) {\n            while (max.right) max = max.right;\n\n            node.key = max.key;\n            node.data = max.data;\n            if (max.left) {\n              node = max;\n              max = max.left;\n            }\n          }\n\n          node.key  = max.key;\n          node.data = max.data;\n          node = max;\n        }\n\n        if (node.right) {\n          min = node.right;\n\n          while (min.left || min.right) {\n            while (min.left) min = min.left;\n\n            node.key  = min.key;\n            node.data = min.data;\n            if (min.right) {\n              node = min;\n              min = min.right;\n            }\n          }\n\n          node.key  = min.key;\n          node.data = min.data;\n          node = min;\n        }\n\n        var parent = node.parent;\n        var pp     = node;\n\n        return this._rebalanceRemove(parent, pp)\n          .then(() => {\n            if (node.parent) {\n              if (node.parent.left === node) node.parent.left  = null;\n              else                           node.parent.right = null;\n            }\n\n            if (node === this._root) this._root = null;\n\n            this._size--;\n            return Promise.resolve(returnValue);\n          });\n      });\n  }\n\n  /**\n   * Bulk-load items\n   * @param  {Array<Key>}  keys\n   * @param  {Array<Value>}  [values]\n   * @return {AVLTree}\n   */\n  load(keys = [], values = []) {\n    if (!Array.isArray(keys)) return this;\n\n    const pairs = [];\n    keys.forEach((k, i) => pairs.push({ k, v: values[i] }));\n\n    return Promise.each(pairs, p => this.insert(p.k, p.v))\n      .then(() => this);\n  }\n\n\n  /**\n   * Returns true if the tree is balanced\n   * @return {boolean}\n   */\n  isBalanced() {\n    return isBalanced(this._root);\n  }\n\n\n  /**\n   * String representation of the tree - primitive horizontal print-out\n   * @param  {Function(Node):string} [printNode]\n   * @return {string}\n   */\n  toString (printNode) {\n    return print(this._root, printNode);\n  }\n}\n\nAVLTree.default = AVLTree;\n"],"names":[],"mappings":"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"}